<meta charset="utf-8" lang="en">            <style class="fallback">body{visibility:hidden;}</style>
<!---


                       DOWNLOAD AND OPEN IN A BROWSER
                          TO SEE PROPER FORMATTING


--->
**Lab 2: Interfaces**
    Username: singletonb
    Date: 12-13-2021
    Course: CS1021
    Submitted to: Dr. Chris Taylor

!!! METRIcS: Instructor Feedback
    | Earned | Possible | Criteria                                         |
    | ------ | -------- | ------------------------------------------------ |
    |   10   |    10    | In lab demo                                      |
    |   30   |    30    | Instructor tests (see end of document)           |
    |   45   |    45    | Technical quality (see point deductions in code) |
    |   10   |    10    | Coding standard compliance and program clarity   |
    |    5   |     5    | Following submission instructions                |

    [Nicely Done](https://msoe.us/taylor/Nice)

# BakedIngredient.java

~~~~ Java
/*
 * Course: CS1021 - 021
 * Winter 2021
 * Lab 2 - Interfaces
 * Name: Benjamin Singleton
 * Created: 12/07/2021
 * Modified: 12/08/2021
 */
package singletonb;

/**
 * A baked version of another Ingredient
 * @author singletonb
 */
public class BakedIngredient implements Ingredient {
    private final Ingredient baseIngredient;
    private final double expansionFactor;

    /**
     * Constructs a BakedIngredient, a baked version of a specified Ingredient
     * @param ingredient the ingredient to be baked
     * @param expansionFactor the multiplier by which the volume of the ingredient
     *                        will expand after being baked
     */
    public BakedIngredient(Ingredient ingredient, double expansionFactor) {
        this.baseIngredient = ingredient;
        this.expansionFactor = expansionFactor;
    }

    @Override
    public double getCalories() {
        return baseIngredient.getCalories();
    }

    /**
     * Gets the volume of this ingredient after being baked by multiplying
     * the base ingredient's volume by its expansionFactor
     * @return the volume of this ingredient (in cups) after being baked
     */
    @Override
    public double getCups() {
        return baseIngredient.getCups() * expansionFactor;
    }

    @Override
    public String getName() {
        return "Baked " + baseIngredient.getName();
    }

    @Override
    public boolean isDry() {
        return true;
    }

    @Override
    public void printRecipe() {
        System.out.printf("""
                        ====================================================
                        %s
                        ====================================================
                        Ingredient to be baked: %s
                        Cups: %s Cups
                        Energy: %d Calories%n%n""",
                getName(), baseIngredient.getName(),
                CUP_FORMAT.format(getCups()), (int)getCalories());
        baseIngredient.printRecipe();
    }
}

~~~~

# EvaporatedMilk.java

~~~~ Java
/*
 * Course: CS1021
 * Winter 2019-20
 * Lab 2 - Interfaces
 * Name: Dr. Yoder
 * Created: 20181204
 */
package singletonb; // replace with your username.

/**
 * Driver class that illustrates making evaporated milk by baking milk.
 */
public class EvaporatedMilk {
    /** The milk to be baked */
    private static final Ingredient MILK =
            new SimpleIngredient(103.0, 1.0, false, "Milk");

    /** Ratio of volume after evaporating to before */
    public static final double DEHYDRATION_FACTOR = 0.2;

    public static void main(String[] args) {
        Ingredient milk = MILK;
        Ingredient evaporatedMilk = new BakedIngredient(milk, DEHYDRATION_FACTOR);
        evaporatedMilk.printRecipe();
    }
}

~~~~

# Ingredient.java

~~~~ Java
/*
 * Course: CS1021 - 021
 * Winter 2021
 * Lab 2 - Interfaces
 * Name: Benjamin Singleton
 * Created: 12/07/2021
 * Modified: 12/08/2021
 */
package singletonb;

import java.text.DecimalFormat;

/**
 * An interface for all ingredient types
 * @author singletonb
 */
public interface Ingredient {
    /**
     * Formats cup amounts of ingredients to two decimal places,
     * hiding trailing zeros if they are present
     */
    DecimalFormat CUP_FORMAT = new DecimalFormat("0.##");

    /**
     * Gets the amount of calories the ingredient contains
     * @return the amount of calories the ingredient contains
     */
    double getCalories();

    /**
     * Gets the volume of the ingredient (in cups)
     * @return the volume of the ingredient (in cups)
     */
    double getCups();

    /**
     * Gets the name of the ingredient
     * @return the name of the ingredient
     */
    String getName();

    /**
     * Checks if the ingredient is dry
     * @return true if the ingredient is dry
     */
    boolean isDry();

    /**
     * Prints the recipe for this ingredient and any that it may consist of
     */
    void printRecipe();
}
~~~~

# Kitchen.java

~~~~ Java
/*
 * Course: CS1021
 * Winter 2019-2020
 * Lab 2 - Kitchen
 * Name: Sean Jones
 * Created: 5 Dec 2019
 */
package singletonb; // change to your username

import java.util.Scanner;

/**
 * The driver class: Builds recipes out of ingredients
 */
public class Kitchen {
    private static final Ingredient BUTTER =
            new SimpleIngredient(810, 0.5, false, "Butter");
    private static final Ingredient CREAM =
            new SimpleIngredient(104, 1/8., false, "Cream");
    private static final Ingredient MILK =
            new SimpleIngredient(103, 1, false, "Milk");
    private static final Ingredient SUGAR =
            new SimpleIngredient(773, 1, true, "Sugar");
    private static final Ingredient FLOUR =
            new SimpleIngredient(455, 1, true, "Flour");
    /**
     * The ratio of the dried milk to the original milk's volume
     */
    public static final double DEHYDRATION_FACTOR = 0.2;
    /**
     * The multiplier indicating how the cake's volume expands while baking
     */
    public static final double CAKE_EXPANSION_FACTOR = 1.2;

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String command = solicitCommand(in);
        while(!command.equals("quit")) {
            switch (command) {
                case "dry milk":
                    makeDryMilk();
                    break;
                case "ice cream":
                    makeIceCream();
                    break;
                case "cookies":
                    makeCookies();
                    break;
                case "cake":
                    makeCake();
                    break;
                default:
                    System.out.println("Unrecognized command: " + command);
            }
            command = solicitCommand(in);
        }

    }

    /**
     * Prints out the main menu and allows the user to choose an
     * option from that menu
     * @param in A scanner which should point to System.in
     * @return The keyword the user typed
     */
    private static String solicitCommand(Scanner in) {
        System.out.println("Please enter an option:");
        System.out.println(" dry milk - Make dehydrate milk");
        System.out.println(" ice cream - Make ice cream");
        System.out.println(" cookies  - Make cookies");
        System.out.println(" cake  - Make a cake");
        System.out.println(" quit - exit the program");
        return in.nextLine();
    }

    private static void makeDryMilk() {
        Ingredient evaporatedMilk = new BakedIngredient(MILK, DEHYDRATION_FACTOR);
        evaporatedMilk.printRecipe();
    }

    private static void makeIceCream() {
// https://cooking.nytimes.com/recipes/1016605-the-only-ice-cream-recipe-youll-ever-need
//        2  cups heavy cream
//        1  cup whole milk
//        2/3  cup sugar
//        1/8  teaspoon fine sea salt
//        6  large egg yolks
        Mix iceCream = new Mix("Ice Cream");
        iceCream.addIngredient(CREAM);
        iceCream.addIngredient(MILK);
        iceCream.addIngredient(SUGAR);
        iceCream.printRecipe();
    }

    private static void makeCookies() {
        Mix cookies = new Mix("Cookies");
        // https://joyfoodsunshine.com/the-most-amazing-chocolate-chip-cookies/
        cookies.addIngredient(new Measure(1, BUTTER));
        cookies.addIngredient(new Measure(3, SUGAR));
        cookies.addIngredient(new Measure(3, FLOUR));

        cookies.printRecipe();
    }

    private static void makeCake() {
        // https://www.allrecipes.com/recipe/17481/simple-white-cake/
        Mix batter = new Mix("Batter");
        batter.addIngredient(new Measure(1, SUGAR));
        batter.addIngredient(new Measure(1, 2, BUTTER));
        batter.addIngredient(new Measure(3, 2, FLOUR));
        batter.addIngredient(new Measure(1, 2, MILK));

        Mix frosting = new Mix("Frosting");
        frosting.addIngredient(new Measure(4, SUGAR));
        frosting.addIngredient(BUTTER); // two sticks of butter...
        frosting.addIngredient(BUTTER);

        Mix cake = new Mix("Cake");
        cake.addIngredient(new BakedIngredient(batter, CAKE_EXPANSION_FACTOR));
        cake.addIngredient(new Measure(3, 2, frosting));

        cake.printRecipe();
    }
}

~~~~

# Measure.java

~~~~ Java
/*
 * Course: CS1021 - 021
 * Winter 2021
 * Lab 2 - Interfaces
 * Name: Benjamin Singleton
 * Created: 12/07/2021
 * Modified: 12/08/2021
 */
package singletonb;

/**
 * An Ingredient with a specific measured volume
 * @author singletonb
 */
public class Measure implements Ingredient {
    private final Ingredient baseIngredient;
    private final int numerator;
    private final int denominator;

    /**
     * Master constructor
     * Constructs a Measure, a version of an Ingredient
     * with the volume of numerator / denominator cups
     * @param numerator the numerator of the fraction of the volume (in cups)
     * @param denominator the denominator of the fraction of the volume (in cups)
     * @param ingredient the Ingredient to be measured
     */
    public Measure(int numerator, int denominator, Ingredient ingredient) {
        this.baseIngredient = ingredient;
        this.numerator = numerator;
        this.denominator = denominator;
    }

    /**
     * Constructs a Measure with numerator and denominator, while defaulting denominator to 1
     * @param numerator the volume of this ingredient (in cups)
     * @param ingredient the Ingredient to be measured
     */
    public Measure(int numerator, Ingredient ingredient) {
        this(numerator, 1, ingredient);
    }

    /**
     * Gets the amount of calories in the specified measure of Ingredient
     * @return the amount of calories in the measured Ingredient
     */
    @Override
    public double getCalories() {
        return baseIngredient.getCalories() / baseIngredient.getCups() * this.getCups();
    }

    @Override
    public double getCups() {
        return (double)numerator / denominator;
    }

    /**
     * Gets the name of the Measure, being the name of the Ingredient measured
     * with the volume of the measure appended to the start
     * @return the name of the Measure
     */
    @Override
    public String getName() {
        return formatQuantity() + " " + baseIngredient.getName();
    }

    @Override
    public boolean isDry() {
        return baseIngredient.isDry();
    }

    @Override
    public void printRecipe() {
        System.out.printf("""
                        ====================================================
                        %s
                        ====================================================
                        Measured ingredient: %s
~~~~ Java highlight
                        Cups: %s (%s Cups)
~~~~
!!! MINUS: -1 Should be Quantity, not Cups
    If you look carefully at the sample output, you'll see that the `Measure` object
    should entitle the volume row of output as __Quantity__ rather than __Cups__.

~~~~ Java
                        Energy: %d Calories%n%n""",
                getName(), baseIngredient.getName(), formatQuantity(),
~~~~ Java highlight
                CUP_FORMAT.format(getCups()), (int)getCalories());
~~~~
!!! MINUS: -1 Measured butter should be singular
    A half cup should be singular, not plural. If you look at the sample
    output for `cake.txt` you can see that the `Measure` of butter is
    printed as:

    ~~~~
    ====================================================
    1/2 Cup Butter
    ====================================================
    Measured ingredient: Butter
    Quantity: 1/2 Cup (0.5 Cups)
    Energy: 810 Calories
    ~~~~

    Your code produces:

    ~~~~
    ====================================================
    1/2 Cups Butter
    ====================================================
    Measured Ingredient: Butter
    Quantity: 1/2 Cups (0.5 Cups)
    Energy: 810 calories
    ~~~~

~~~~ Java
        baseIngredient.printRecipe();
    }

    private String formatQuantity() {
        return numerator == denominator ? "1 Cup"
                : (denominator == 1 ? numerator : numerator + "/" + denominator) + " Cups";
    }
}
~~~~

# Mix.java

~~~~ Java
/*
 * Course: CS1021 - 021
 * Winter 2021
 * Lab 2 - Interfaces
 * Name: Benjamin Singleton
 * Created: 12/07/2021
 * Modified: 12/08/2021
 */
package singletonb;

import java.util.ArrayList;
import java.util.List;

/**
 * A mix of multiple Ingredients
 * @author singletonb
 */
public class Mix implements Ingredient {
    private final List&lt&#xFEFF;Ingredient> ingredients;
    private final String name;

    /**
     * Constructs the Mix, initializing its name and
     * an ArrayList to hold each Ingredient it consists of
     * @param name the name of this Mix
     */
    public Mix(String name) {
        this.ingredients = new ArrayList&lt&#xFEFF;>();
        this.name = name;
    }

    /**
     * Adds an Ingredient to the Mix
     * @param ingredient the Ingredient to be added
     */
    public void addIngredient(Ingredient ingredient) {
        ingredients.add(ingredient);
    }

    /**
     * Checks if this Mix contains a dry Ingredient
     * @return true if the Mix contains a dry Ingredient
     */
    public boolean hasDryIngredient() {
        boolean foundDryIngredient = false;
        for(int i = 0; i &lt&#xFEFF; ingredients.size() && !foundDryIngredient; i++) {
            foundDryIngredient = ingredients.get(i).isDry();
        }
        return foundDryIngredient;
    }

    /**
     * Checks if this Mix contains a wet Ingredient
     * @return true if the Mix contains a wet Ingredient
     */
    public boolean hasWetIngredient() {
~~~~ Java highlight
        boolean foundWetIngredient = false;
        for(int i = 0; i &lt&#xFEFF; ingredients.size() && !foundWetIngredient; i++) {
            foundWetIngredient = !ingredients.get(i).isDry();
        }
        return foundWetIngredient;
~~~~
!!! FEEDBACK: Bonus material... feel free to ignore
    We won't cover this until later in the quarter, but starting in version
    8 of Java, there is an alternative to the for-each loop that you may
    find interesting.  Modern versions of Java have added functional
    programming features that make it possible for us to implement this
    method in just one line:
    ```
    return ingredients.stream().anyMatch(ingredient -> !ingredient.isDry());
    ```

    The `ingredients.stream()` call returns a stream of data that has a
    number of methods that can be applied to it. The method `anyMatch()`
    is one of those methods. It requires that you pass it something called
    a `Predicate`. `Predicate` is an interface that requires one method
    to be implemented: `boolean test(Ingredient ingredient)`. We could that like this:

    ```
    public class WetChecker implements Predicate<Ingredient> {
        @Override
        public boolean test(Ingredient ingredient) {
            return !ingredient.isDry();
        }
    }
    ```

    Almost all of this class implementation is boilerplate code, and
    Java has made it easy to avoid typing all this stuff. In particular,
    if an interface has only one method that needs to be implemented, we
    can replace it with something called a lambda expression.

    Here the lambda expression is:

    ```
    ingredient -> !ingredient.isDry()
    ```

    This is essentially a replacement for the `test(Ingredient ingredient)`
    method which just says, if `ingredient` is passed to `test()`, it should
    return `!ingredient.isDry()`. In the above, we can pass the lambda
    expression to `anyMatch()` which then goes through all of the elements
    in the `stream` (i.e., all of the elements in the `ingredients` list)
    and applies the predicate method (`!ingredient.isDry()`) to each element.
    If any one of these evaluations is `true`, then the entire statement is
    `true`. That is, there is a wet ingredient.

    This ended up being a longer comment than I expected. Don't worry about
    this for now, but we will discuss it more around week 8.

~~~~ Java
    }

    /**
     * Sums up the amount of calories each Ingredient the Mix contains
     * to get the total calories in this Mix
     * @return the number of calories in this Mix
     */
    @Override
    public double getCalories() {
        double calories = 0;
        for(Ingredient ingredient : ingredients) {
            calories += ingredient.getCalories();
        }
        return calories;
    }

    /**
     * Sums up the volumes (in cups) of each Ingredient the Mix contains
     * to get the total volume of this Mix
     * @return the volume (in cups) of this Mix
     */
    @Override
    public double getCups() {
        double cups = 0;
        for(Ingredient ingredient : ingredients) {
            cups += ingredient.getCups();
        }
        return cups;
    }

    @Override
    public String getName() {
        return name;
    }

    /**
     * Checks if this Mix is dry, which will always be false if it contains a wet Ingredient
     * @return true if this Mix is dry
     */
    @Override
    public boolean isDry() {
        return !hasWetIngredient();
    }

    @Override
    public void printRecipe() {
        System.out.printf("""
                        ====================================================
                        %s
                        ====================================================%n""",
                getName());

        if(this.hasDryIngredient()) {
            System.out.println("Dry Ingredients:");
            for(Ingredient ingredient : ingredients) {
                if(ingredient.isDry()) {
                    System.out.println("  " + ingredient.getName());
                }
            }
            System.out.print("\n");
        }

        if(this.hasWetIngredient()) {
            System.out.println("Wet Ingredients:");
            for(Ingredient ingredient : ingredients) {
                if(!ingredient.isDry()) {
                    System.out.println("  " + ingredient.getName());
                }
            }
            System.out.print("\n");
        }

        System.out.printf("""
                Cups: %s Cups
                Energy: %d Calories%n%n""", CUP_FORMAT.format(getCups()), (int)getCalories());

        for(Ingredient ingredient : ingredients) {
            ingredient.printRecipe();
        }
    }
}

~~~~

# SimpleIngredient.java

~~~~ Java
/*
 * Course: CS1021 - 021
 * Winter 2021
 * Lab 2 - Interfaces
 * Name: Benjamin Singleton
 * Created: 12/07/2021
 * Modified: 12/08/2021
 */
package singletonb;

/**
 * A basic ingredient with a default volume
 * @author singletonb
 */
public class SimpleIngredient implements Ingredient {
    private final double calories;
    private final double cups;
    private final boolean isDry;
    private final String name;

    /**
     * Constructs a SimpleIngredient
     * @param calories the number of calories in the specified volume of this ingredient
     * @param cups the volume of this ingredient
     * @param isDry true if this ingredient is dry
     * @param name the name of this ingredient
     */
    public SimpleIngredient(double calories, double cups, boolean isDry, String name) {
        this.calories = calories;
        this.cups = cups;
        this.isDry = isDry;
        this.name = name;
    }

    @Override
    public double getCalories() {
        return calories;
    }

    @Override
    public double getCups() {
        return cups;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public boolean isDry() {
        return isDry;
    }

    @Override
    public void printRecipe() {
        System.out.printf("""
                        ====================================================
                        %s
                        ====================================================
                        Cups: %s Cups
                        Energy: %d Calories%n%n""",
                getName(), CUP_FORMAT.format(getCups()), (int)getCalories());
    }
}
~~~~


<!-- Markdeep: --><script src="https://csse.msoe.us/markdeep.js?graded"></script>
